" Created by Mohammed Alzakariya <github.com/LanHikari22>
" personal vim configuration to upload to new machines

call plug#begin()
" Download vim.plug to ~/.vim/autoload from github.com/junegunn/vim-plug:
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

" run :PlugInstall to install plugins. 

"" Themes
Plug 'morhetz/gruvbox'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'altercation/vim-colors-solarized'

"" Editing
"Plug 'jiangmiao/auto-pairs'
Plug 'preservim/nerdcommenter'											" see config below
Plug 'yggdroot/indentLine'
 
"" Navigation
Plug 'preservim/nerdtree' 													" see config below
Plug 'preservim/tagbar'															
Plug 'junegunn/fzf', {'dir': '~/.fzf','do': './install --all'}
Plug 'junegunn/fzf.vim'															" see config below
Plug 'justinmk/vim-sneak'                           

"" UI
Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-fugitive'
Plug 'wincent/terminus'

Plug 'tpope/vim-sensible'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-repeat'
Plug 'svermeulen/vim-macrobatics'                   " see config below
Plug 'chrisbra/Recover.vim'                         
Plug 'kshenoy/vim-signature'

"" Etcnnmap <silent> <C-p> <C-i>
map <silent> <C-p> <C-i>

" plugin config
"" Plug 'preservim/nerdtree'
nmap !n :NERDTreeToggle<cr>
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
function s:CloseIfOnlyNerdTreeLeft()
	if exists("t:NERDTreeBufName")
		if bufwinnr(t:NERDTreeBufName) != -1
			if winnr("$") == 1
				q
			endif
		endif
	endif
endfunction

"" Plug 'preservim/nerdcommenter'
nmap <C-_>	<Plug>NERDCommenterToggle
vmap <C-_>	<Plug>NERDCommenterToggle<CR>gv
let g:NERDSpaceDelims = 1

"" Plug 'junegunn/fzf.vim'
nmap !f :Files<cr>
nmap !g :Rg<cr>
nmap !t :Tags<cr>

call plug#end()

" Plug 'svermeulen/vim-macrobatics'

" Use <nowait> to override the default bindings which wait for another key
" press
nmap <nowait> q <plug>(Mac_Play)
nmap <nowait> gq <plug>(Mac_RecordNew)

nmap <leader>mh :DisplayMacroHistory<cr>

nmap [m <plug>(Mac_RotateBack)
nmap ]m <plug>(Mac_RotateForward)

nmap <leader>ma <plug>(Mac_Append)
nmap <leader>mp <plug>(Mac_Prepend)

nmap <leader>mng <plug>(Mac_NameCurrentMacro)
nmap <leader>mnf <plug>(Mac_NameCurrentMacroForFileType)
nmap <leader>mns <plug>(Mac_NameCurrentMacroForCurrentSession)

nmap <leader>mo <plug>(Mac_SearchForNamedMacroAndOverwrite)
nmap <leader>mr <plug>(Mac_SearchForNamedMacroAndRename)
nmap <leader>md <plug>(Mac_SearchForNamedMacroAndDelete)
nmap <leader>me <plug>(Mac_SearchForNamedMacroAndPlay)
nmap <leader>ms <plug>(Mac_SearchForNamedMacroAndSelect)


" ---------------------------------------------------------------------------
" Other configs
" ---------------------------------------------------------------------------

" write permision-protected file
nmap ,ws	:w !sudo tee % > /dev/null

" tabstop set to 2 or 4
nmap ,ts2 :set tabstop=2<cr>
nmap ,ts4 :set tabstop=4<cr>

" map scrolling
map <silent> <C-j> <C-e>
map <silent> <C-k> <C-y>

colo gruvbox
let g:gruvbox_contrast_dark="hard"
set background=dark
set t_Co=256

set nu rnu
" set hlsearch

filetype plugin on
syntax on

set clipboard=unnamedplus

set foldmethod=indent
set nofoldenable

set tabstop=2
set shiftwidth=0

set expandtab
set autoindent

set nowrap

command! -nargs=0 Random4 :r!python3 -c "import random; print(int(random.random() * 1E4))"

function! GetWeekRelativeCustomDateString()
    " Get date of monday of this week and shorten 20XX to XX.
    let date_string = system("if [ $(date +%a) = 'Mon' ]; then date +%Y%m%d | awk '{print substr($0,3)}'; else date -d'monday last week' +%Y%m%d | awk '{print substr($0,3)}'; fi")
    let date_string = substitute(date_string, '\n', '', 'g')

    " Get week number and shorten day code
    let week_string = system("date +W%V%a | sed 's/Mon/M/; s/Tue/T/; s/Wed/W/; s/Thu/R/; s/Fri/F/; s/Sat/S/; s/Sun/U/'")

    let result = date_string . "-" . week_string

    return result
endfunction

function! GetLeadingSpaces()
    " Get the current line number
    let l:current_line = line('.')

    " Loop backward from the current line
    while l:current_line > 0
        " Get the content of the current line
        let l:line_content = getline(l:current_line)

        " Check if the line starts with the date pattern
        if l:line_content =~ '^\s*- \d\{6\}-W\d\{2\}[MTWRFSU]'
            " Match the leading spaces of the line and return
            return matchstr(l:line_content, '^\s\+')
        endif

        " if the line starts with a non-space character, there won't be any spaces
        if l:line_content =~ '^\S'
            return ''
        endif

        " Decrement the line number to check the previous line
        let l:current_line -= 1
    endwhile

    " If no matching line is found, return empty string
    return ''
endfunction

function! CreateNoteTemplate()
    " Get current date in specified format
    let date_string = GetWeekRelativeCustomDateString()

    " Get current time
    let time_string = system("date +%H:%M")

    " Generate a random number and pad it to four digits
    let random_num = printf("%04d", system("echo $(( RANDOM % 10000 ))"))

    " Concatenate to create the unique identifier
    let identifier = "P[" . trim(date_string) . "-" . trim(random_num) . "]"

    let spaces= GetLeadingSpaces()

    let divider="------------------------------------------------------------------------"

    " Create the todo log
    let todo_log = spaces . identifier . "- TODO (tags: #)\n" . spaces . "\tLOG_START\n" . spaces . "\t- " . trim(date_string) . " " . trim(time_string) . " - Created Note Entry\n" . spaces . "\tLOG_END\n" . spaces . divider

    " Add the todo log to the current buffer
    call append(line('.'), split(todo_log, '\n'))
endfunction

function! CreateNoteLog()
    " Get current date in specified format
    let date_string = GetWeekRelativeCustomDateString()

    " Get current time
    let time_string = system("date +%H:%M")

    let leading_spaces = GetLeadingSpaces()

    " Create the todo log
    let todo_log = leading_spaces . "- " . trim(date_string) . " " . trim(time_string) . " - \n"

    " Add the todo log to the current buffer
    call append(line('.'), split(todo_log, '\n'))
endfunction

autocmd BufRead,BufNewFile ~/.task/schedule/events.csv colorscheme calcure_colors
autocmd BufRead,BufNewFile ~/.task/schedule/events_ann colorscheme calcure_colors

" Function to set the filetype if LOG_START token is present
function! SetCustomLogFileType()
    if expand('%:t') == '.vimrc'
        return
    endif

    if expand('%:e') == 'vim'
        return
    endif

    if search('LOG_START', 'nw') > 0
      set filetype=custom_log
    endif
endfunction

autocmd FileType custom_log colorscheme custom_log
autocmd BufRead,BufNewFile * call SetCustomLogFileType()
