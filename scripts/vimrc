" Created by Mohammed Alzakariya <github.com/LanHikari22>
" personal vim configuration to upload to new machines

call plug#begin()
" Download vim.plug to ~/.vim/autoload from github.com/junegunn/vim-plug:
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

" run :PlugInstall to install plugins. 

"" Themes
Plug 'morhetz/gruvbox'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'altercation/vim-colors-solarized'

"" Editing
"Plug 'jiangmiao/auto-pairs'
Plug 'preservim/nerdcommenter'											" see config below
Plug 'yggdroot/indentLine'
 
"" Navigation
Plug 'preservim/nerdtree' 													" see config below
Plug 'preservim/tagbar'															
Plug 'junegunn/fzf', {'dir': '~/.fzf','do': './install --all'}
Plug 'junegunn/fzf.vim'															" see config below
Plug 'antoinemadec/coc-fzf'                         " see config below
Plug 'justinmk/vim-sneak'                           

"" UI
Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-fugitive'
Plug 'wincent/terminus'

Plug 'tpope/vim-sensible'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-repeat'
Plug 'svermeulen/vim-macrobatics'                   " see config below

"" Etcnnmap <silent> <C-p> <C-i>
map <silent> <C-p> <C-i>

"" Intellisence & Autocomplete
"Plug 'neoclide/coc.nvim', {'branch': 'release'}     " see config below

" plugin config
"" Plug 'preservim/nerdtree'
nmap !n :NERDTreeToggle<cr>
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
function s:CloseIfOnlyNerdTreeLeft()
	if exists("t:NERDTreeBufName")
		if bufwinnr(t:NERDTreeBufName) != -1
			if winnr("$") == 1
				q
			endif
		endif
	endif
endfunction

"" Plug 'preservim/nerdcommenter'
nmap <C-_>	<Plug>NERDCommenterToggle
vmap <C-_>	<Plug>NERDCommenterToggle<CR>gv
let g:NERDSpaceDelims = 1

"" Plug 'junegunn/fzf.vim'
nmap !f :Files<cr>
nmap !g :Rg<cr>
nmap !t :Tags<cr>

" Plug 'antoinemadec/coc-fzf'
nmap !o :CocFzfList outline<cr>
nmap !d :CocFzfList diagnostics<cr>


"" Plug 'neoclide/coc.nvim'
" remap <C-i> which is taken by tab for completion
nnoremap <C-p> <C-i>
"
" if hidden is not set, TextEdit might fail.
set hidden
" Better display for messages
set cmdheight=2
" You will have bad experience for diagnostic messages when it's default 4000
set updatetime=300
" don't give |ins-completion-menu} messages
set shortmess+=c
" always show signcolumns
set signcolumn=yes
" Use tab for trigger completion with charaacters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1] =~# '\s'
endfunction

" Use <c-space> to trigger completion
inoremap <silent><expr> <c-space> coc#refresh()
" Use <cr> to confirmcompletion, <C-g>u means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Use '[c' and ']c' to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)
" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
"autocmd CursorHold * silent call CocActionAsync('highlight') " TODO reenable
" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)
" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)
" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)
" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')
" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)
" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
" Add status line support, for integration with other plugin, checkout `:hcoc-status`
"set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
function! CocMinimalStatus() abort
  return get(g:, 'coc_status', '')
endfunction
let g:airline_section_c = '%t %#LineNr#%{CocMinimalStatus()}'
"
" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

call plug#end()

" Plug 'svermeulen/vim-macrobatics'

" Use <nowait> to override the default bindings which wait for another key
" press
nmap <nowait> q <plug>(Mac_Play)
nmap <nowait> gq <plug>(Mac_RecordNew)

nmap <leader>mh :DisplayMacroHistory<cr>

nmap [m <plug>(Mac_RotateBack)
nmap ]m <plug>(Mac_RotateForward)

nmap <leader>ma <plug>(Mac_Append)
nmap <leader>mp <plug>(Mac_Prepend)

nmap <leader>mng <plug>(Mac_NameCurrentMacro)
nmap <leader>mnf <plug>(Mac_NameCurrentMacroForFileType)
nmap <leader>mns <plug>(Mac_NameCurrentMacroForCurrentSession)

nmap <leader>mo <plug>(Mac_SearchForNamedMacroAndOverwrite)
nmap <leader>mr <plug>(Mac_SearchForNamedMacroAndRename)
nmap <leader>md <plug>(Mac_SearchForNamedMacroAndDelete)
nmap <leader>me <plug>(Mac_SearchForNamedMacroAndPlay)
nmap <leader>ms <plug>(Mac_SearchForNamedMacroAndSelect)


" ---------------------------------------------------------------------------
" Other configs
" ---------------------------------------------------------------------------

" write permision-protected file
nmap ,ws	:w !sudo tee % > /dev/null

" tabstop set to 2 or 4
nmap ,ts2 :set tabstop=2<cr>
nmap ,ts4 :set tabstop=4<cr>

" map scrolling
map <silent> <C-j> <C-e>
map <silent> <C-k> <C-y>

colo gruvbox
let g:gruvbox_contrast_dark="hard"
set background=dark
set t_Co=256

set nu rnu
" set hlsearch

filetype plugin on
syntax on

set clipboard=unnamedplus

set foldmethod=indent
set nofoldenable

set tabstop=2
set shiftwidth=0

set expandtab
set autoindent

command! -nargs=0 Random4 :r!python3 -c "import random; print(int(random.random() * 1E4))"

function! GetWeekRelativeCustomDateString()
    " Get date of monday of this week and shorten 20XX to XX.
    let date_string = system("if [ $(date +%a) = 'Mon' ]; then date +%Y%m%d | awk '{print substr($0,3)}'; else date -d'monday last week' +%Y%m%d | awk '{print substr($0,3)}'; fi")
    let date_string = substitute(date_string, '\n', '', 'g')

    " Get week number and shorten day code
    let week_string = system("date +W%V%a | sed 's/Mon/M/; s/Tue/T/; s/Wed/W/; s/Thu/R/; s/Fri/F/; s/Sat/S/; s/Sun/U/'")

    let result = date_string . "-" . week_string

    return result
endfunction

function! CreateNoteTemplate()
    " Get current date in specified format
    let date_string = GetWeekRelativeCustomDateString()

    " Get current time
    let time_string = system("date +%H:%M")

    " Generate a random number and pad it to four digits
    let random_num = printf("%04d", system("echo $(( RANDOM % 10000 ))"))

    " Concatenate to create the unique identifier
    let identifier = "P[" . trim(date_string) . "-" . trim(random_num) . "]"

    " Create the todo log
    let todo_log = identifier . " - TODO (tags: #)\n\tLOG_START\n\t- " . trim(date_string) . " " . trim(time_string) . " - TODO\n\tLOG_END"

    " Add the todo log to the current buffer
    call append(line('.'), split(todo_log, '\n'))
endfunction

function! CreateNoteLog()
    " Get current date in specified format
    let date_string = GetWeekRelativeCustomDateString()

    " Get current time
    let time_string = system("date +%H:%M")

    " Create the todo log
    let todo_log = "\t- " . trim(date_string) . " " . trim(time_string) . " - TODO\n"

    " Add the todo log to the current buffer
    call append(line('.'), split(todo_log, '\n'))
endfunction

autocmd BufRead,BufNewFile ~/.task/schedule/events.csv colorscheme calcure_colors
autocmd BufRead,BufNewFile ~/.task/schedule/events_ann colorscheme calcure_colors
